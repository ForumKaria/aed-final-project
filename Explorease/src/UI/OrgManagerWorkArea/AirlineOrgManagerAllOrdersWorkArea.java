/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.OrgManagerWorkArea;

import Business.Employee.Employee;
import Business.Organization.Organization;
import Business.Platform;
import Business.Product.FoodServiceProduct;
import Order.Order;
import UserAccount.UserAccount;
import WorkRequest.AirTicketWorkRequest;
import WorkRequest.FoodServiceWorkRequest;
import WorkRequest.WorkRequest;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author emi
 */
public class AirlineOrgManagerAllOrdersWorkArea extends javax.swing.JPanel {

    /**
     * Creates new form AirlineOrgManagerAllOrdersWorkArea
     */
    Platform platform;
    UserAccount ua;
    JPanel container;
    Organization org;
    DefaultTableModel orderTable;

    public AirlineOrgManagerAllOrdersWorkArea(Platform platform, JPanel container, UserAccount ua) {
        initComponents();
        this.platform = platform;
        this.container = container;
        this.ua = ua;
        this.org = platform.findOrgByUserAccount(ua.getUsername(), ua.getPassword());
        this.orderTable = (DefaultTableModel) queue.getModel();

        populateOrders();
    }

    public void populateOrders() {
//        queue.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
//            @Override
//            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
//                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
//                c.setBackground(row % 2 == 0 ? Color.LIGHT_GRAY : Color.WHITE);
//                return c;
//            }
//        });
        this.org.getWorkQueue();
        orderTable.setRowCount(0);
        ArrayList<WorkRequest> wra = this.org.getWorkQueue().getWorkQueue();
        if (wra.size() > 0) {

            for (WorkRequest wr : wra) {
                AirTicketWorkRequest awr = (AirTicketWorkRequest) wr;
                Object[] row = new Object[9];
                row[0] = wr;
                row[1] = wr.getOrder();
                row[2] = wr.getCustomer().getPerson().getName();
//                row[3] = wr.getOrder().getOrderTotal();
                row[3] = wr.getOrder().getMainOrderTotal(); //not including food price for air org revenue
                row[4] = awr.getNeedFood();
                row[5] = wr.getStatus();
                row[6] = wr.getOrder().getOrderApproved();
                row[7] = wr.getOrder().getOrderitems().get(0).getSelectedproduct().toString();
                row[8] = wr.getAssignedTo();

                orderTable.addRow(row);

            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        queue = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        orderFood = new javax.swing.JButton();
        appBtn = new javax.swing.JButton();
        rejBtn = new javax.swing.JButton();
        statusTxt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        assignBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        queue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "WorkRequest ID", "Order ID", "Customer", "Price", "Food Required", "Status", "Order Booked", "Order Details", "Assigned To"
            }
        ));
        jScrollPane1.setViewportView(queue);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("WORK QUEUE");

        orderFood.setText("Order Food For Customer");
        orderFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderFoodActionPerformed(evt);
            }
        });

        appBtn.setText("Approve");
        appBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appBtnActionPerformed(evt);
            }
        });

        rejBtn.setText("Reject");
        rejBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejBtnActionPerformed(evt);
            }
        });

        jButton1.setText("Set Processing Status");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        assignBtn.setBackground(new java.awt.Color(0, 255, 204));
        assignBtn.setText("Assign to me");
        assignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 774, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(orderFood, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(appBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rejBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(statusTxt)
                            .addComponent(assignBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(63, 63, 63))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jLabel1)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(assignBtn)
                        .addGap(37, 37, 37)
                        .addComponent(orderFood)
                        .addGap(50, 50, 50)
                        .addComponent(statusTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(74, 74, 74)
                        .addComponent(appBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rejBtn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(300, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void orderFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderFoodActionPerformed
        // TODO add your handling code here:

        int selectedRow;
        selectedRow = queue.getSelectedRow();
        if (selectedRow > -1) {
        Boolean needFood = (Boolean) orderTable.getValueAt(selectedRow, 4);
        Order order = (Order) orderTable.getValueAt(selectedRow, 1);
        WorkRequest wr = (WorkRequest) orderTable.getValueAt(selectedRow, 0);
            if (wr.getAssignedTo().equals("None") || wr.getAssignedTo().equals(ua.getUsername())) {
                if (!needFood) {
                    JOptionPane.showMessageDialog(null, "No in-flight food ordered");
                } else {
                    //create food request
                    Order foodOrderSentToFS = this.org.getOrderCatalog().createOrder(order.getCustomer());
                    AirTicketWorkRequest airWR = (AirTicketWorkRequest) wr;
                    FoodServiceProduct foodSelected = (airWR.getIsVegan()) ? new FoodServiceProduct("Vegan", 30) : new FoodServiceProduct("Non-veg", 40);

                    //for round trip, add two food order items 
                    if (airWR.getIsRooundTrip()) {
                        foodOrderSentToFS.newOrderItem(foodSelected);
                        foodOrderSentToFS.newOrderItem(foodSelected);
                    } else {
                        foodOrderSentToFS.newOrderItem(foodSelected);
                    }

                    FoodServiceWorkRequest foodwr = order.getOrderWorkQueue().newFoodServiceWorkRequest(foodOrderSentToFS, order.getCustomer(), this.ua, this.platform);

                    //link this request with customer's main flight order and request
                    foodwr.setCustomerFlightOrder(order);
                    foodwr.setCustomerFlightRequest(airWR);

                    wr.setStatus("Making food reservation from food supplier");
                    JOptionPane.showMessageDialog(null, "Food request sent");

                    populateOrders();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Request already assigned");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Select a Work request!");

        }
    }//GEN-LAST:event_orderFoodActionPerformed

    private void appBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow;
        selectedRow = queue.getSelectedRow();
        if (selectedRow > -1) {
        WorkRequest wr = (WorkRequest) orderTable.getValueAt(selectedRow, 0);

            if (wr.getAssignedTo().equals("None") || wr.getAssignedTo().equals(ua.getUsername())) {
                if (wr.getStatus().equalsIgnoreCase("Work Request Finished") || wr.getStatus().equalsIgnoreCase("Work Request Rejected")) {
                    JOptionPane.showMessageDialog(null, "Processing already completed");
                } else {
                    this.org.getWorkQueue().finishWorkRequest(wr);
                    populateOrders();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Request already assigned");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Select a Work request!");

        }
    }//GEN-LAST:event_appBtnActionPerformed

    private void rejBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejBtnActionPerformed
        // TODO add your handling code here:'
        int selectedRow;
        selectedRow = queue.getSelectedRow();
        if (selectedRow > -1) {
        WorkRequest wr = (WorkRequest) orderTable.getValueAt(selectedRow, 0);
            if (wr.getAssignedTo().equals("None") || wr.getAssignedTo().equals(ua.getUsername())) {
                if (wr.getStatus().equalsIgnoreCase("Work Request Finished") || wr.getStatus().equalsIgnoreCase("Work Request Rejected")) {
                    JOptionPane.showMessageDialog(null, "Processing already completed");
                } else {
                    this.org.getWorkQueue().rejectWorkRequest(wr);
                    populateOrders();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Request already assigned");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Select a Work request!");

        }
    }//GEN-LAST:event_rejBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow;
        selectedRow = queue.getSelectedRow();
        if (selectedRow > -1) {
        WorkRequest wr = (WorkRequest) orderTable.getValueAt(selectedRow, 0);
            if (wr.getAssignedTo().equals("None") || wr.getAssignedTo().equals(ua.getUsername())) {
                wr.setStatus(statusTxt.getText());
                populateOrders();
            } else {
                JOptionPane.showMessageDialog(null, "Request already assigned");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Select a Work request!");

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void assignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow;
        selectedRow = queue.getSelectedRow();
        if (selectedRow > -1) {
        WorkRequest wr = (WorkRequest) orderTable.getValueAt(selectedRow, 0);
            if (wr.getAssignedTo().equals("None") || wr.getAssignedTo().equals(ua.getUsername())) {
                wr.setAssignedTo(ua.getUsername());
                populateOrders();
            } else {
                JOptionPane.showMessageDialog(null, "Request already assigned");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Select a Work request!");

        }
    }//GEN-LAST:event_assignBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton appBtn;
    private javax.swing.JButton assignBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton orderFood;
    private javax.swing.JTable queue;
    private javax.swing.JButton rejBtn;
    private javax.swing.JTextField statusTxt;
    // End of variables declaration//GEN-END:variables
}
